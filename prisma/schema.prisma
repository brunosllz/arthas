generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                  String  @id @default(uuid())
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  users               users   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@index([user_id])
}

model answer_comments {
  id         String    @id @default(uuid())
  content    String
  author_id  String
  answer_id  String
  created_at DateTime  @default(now())
  updated_at DateTime?
  answers    answers   @relation(fields: [answer_id], references: [id], onDelete: Cascade)
  users      users     @relation(fields: [author_id], references: [id])
}

model answers {
  id              String            @id @default(uuid())
  content         String
  author_id       String
  project_id      String
  created_at      DateTime          @default(now())
  updated_at      DateTime?
  answer_comments answer_comments[]
  users           users             @relation(fields: [author_id], references: [id])
  projects        projects          @relation(fields: [project_id], references: [id], onDelete: Cascade)
}

model interested_in_projects {
  id          String            @id @default(uuid())
  user_id     String
  project_id  String
  status      INTERESTED_STATUS @default(pending)
  occurred_at DateTime          @default(now())
  projects    projects          @relation(fields: [project_id], references: [id])
  users       users             @relation(fields: [user_id], references: [id])
}

model notifications {
  id                                      String            @id @default(uuid())
  cta_title                               String[]
  type                                    NOTIFICATION_TYPE
  link_to                                 String
  author_id                               String
  recipient_id                            String
  created_at                              DateTime          @default(now())
  read_at                                 DateTime?
  title                                   String
  users_notifications_author_idTousers    users             @relation("notifications_author_idTousers", fields: [author_id], references: [id])
  users_notifications_recipient_idTousers users             @relation("notifications_recipient_idTousers", fields: [recipient_id], references: [id])
}

model project_roles {
  id             String   @id @default(uuid())
  description    String
  members_amount Int
  project_id     String
  role_id        String
  projects       projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  roles          roles    @relation(fields: [role_id], references: [id])
  users          users[]  @relation("ProjectRoleToUser")

  @@unique([project_id, role_id])
}

model projects {
  id                     String                      @id @default(uuid())
  author_id              String
  name                   String
  description            String
  status                 PROJECT_STATUS              @default(recruiting)
  image_url              String
  banner_url             String?
  slug                   String
  available_time_value   Int
  available_time_unit    PROJECT_AVAILABLE_TIME_UNIT
  created_at             DateTime                    @default(now())
  updated_at             DateTime?
  available_days         Int[]
  answers                answers[]
  interested_in_projects interested_in_projects[]
  project_roles          project_roles[]
  users                  users                       @relation(fields: [author_id], references: [id])
  projects_realized      projects_realized[]
  team_members           team_members[]
  skills                 skills[]                    @relation("ProjectToSkill")

  @@unique([author_id, slug])
}

model roles {
  id            String          @id
  name          String          @unique
  project_roles project_roles[]
}

model sessions {
  id            String   @id @default(uuid())
  session_token String   @unique
  user_id       String
  expires       DateTime
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model skills {
  id       String     @id @default(uuid())
  slug     String     @unique
  projects projects[] @relation("ProjectToSkill")
  users    users[]    @relation("SkillToUser")
}

model team_members {
  id              String                 @id @default(uuid())
  recipient_id    String
  permission_type MEMBER_PERMISSION_TYPE @default(member)
  status          MEMBER_STATUS          @default(pending)
  project_id      String
  created_at      DateTime               @default(now())
  updated_at      DateTime?
  projects        projects               @relation(fields: [project_id], references: [id], onDelete: Cascade)
  users           users                  @relation(fields: [recipient_id], references: [id])
}

model users {
  id                                              String                   @id @default(uuid())
  name                                            String
  email                                           String                   @unique
  about_me                                        String?
  title                                           String?
  avatar_url                                      String
  city                                            String?
  state                                           String?
  country                                         String?
  linkedin_link                                   String?
  github_link                                     String?
  onboard                                         DateTime?
  created_at                                      DateTime                 @default(now())
  updated_at                                      DateTime?
  profile_url                                     String?                  @unique
  slug_profile                                    String                   @unique
  role                                            String?
  seniority                                       String?
  overall_rate                                    Decimal                  @default(0.0) @db.Decimal(5, 2)
  accounts                                        accounts[]
  answer_comments                                 answer_comments[]
  answers                                         answers[]
  interested_in_projects                          interested_in_projects[]
  notifications_notifications_author_idTousers    notifications[]          @relation("notifications_author_idTousers")
  notifications_notifications_recipient_idTousers notifications[]          @relation("notifications_recipient_idTousers")
  projects                                        projects[]
  projects_realized                               projects_realized[]
  sessions                                        sessions[]
  team_members                                    team_members[]
  projectRole                                     project_roles[]          @relation("ProjectRoleToUser")
  skills                                          skills[]                 @relation("SkillToUser")
}

model projects_realized {
  id                String   @id @default(uuid())
  user_id           String
  project_id        String
  short_description String
  occurred_at       DateTime @default(now())
  project           projects @relation(fields: [project_id], references: [id])
  user              users    @relation(fields: [user_id], references: [id])
}

enum MEMBER_PERMISSION_TYPE {
  member
  owner
}

enum MEMBER_STATUS {
  pending
  rejected
  approved
}

enum PROJECT_STATUS {
  recruiting
  inProgress
  closed
}

enum NOTIFICATION_TYPE {
  message
  action
  interaction
  info
}

enum INTERESTED_STATUS {
  pending
  rejected
  approved
}

enum PROJECT_AVAILABLE_TIME_UNIT {
  hour
  minute
}
